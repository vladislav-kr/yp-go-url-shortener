// Code generated by mockery v2.37.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vladislav-kr/yp-go-url-shortener/internal/domain/models"
)

// Keeperer is an autogenerated mock type for the Keeperer type
type Keeperer struct {
	mock.Mock
}

// GetURL provides a mock function with given fields: ctx, id
func (_m *Keeperer) GetURL(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLS provides a mock function with given fields: ctx, userID
func (_m *Keeperer) GetURLS(ctx context.Context, userID string) ([]models.MassURL, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.MassURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.MassURL, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.MassURL); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MassURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostURL provides a mock function with given fields: ctx, url, userID
func (_m *Keeperer) PostURL(ctx context.Context, url string, userID string) (string, error) {
	ret := _m.Called(ctx, url, userID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, url, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, url, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, url, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURLS provides a mock function with given fields: ctx, urls, userID
func (_m *Keeperer) SaveURLS(ctx context.Context, urls []models.BatchRequest, userID string) ([]models.BatchResponse, error) {
	ret := _m.Called(ctx, urls, userID)

	var r0 []models.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.BatchRequest, string) ([]models.BatchResponse, error)); ok {
		return rf(ctx, urls, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.BatchRequest, string) []models.BatchResponse); ok {
		r0 = rf(ctx, urls, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.BatchRequest, string) error); ok {
		r1 = rf(ctx, urls, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeeperer creates a new instance of Keeperer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeeperer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Keeperer {
	mock := &Keeperer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
