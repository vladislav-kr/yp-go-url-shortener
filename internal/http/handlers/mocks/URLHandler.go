// Code generated by mockery v2.37.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/vladislav-kr/yp-go-url-shortener/internal/domain/models"
)

// URLHandler is an autogenerated mock type for the URLHandler type
type URLHandler struct {
	mock.Mock
}

// Ping provides a mock function with given fields: ctx
func (_m *URLHandler) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadURL provides a mock function with given fields: ctx, alias
func (_m *URLHandler) ReadURL(ctx context.Context, alias string) (string, error) {
	ret := _m.Called(ctx, alias)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURL provides a mock function with given fields: ctx, url
func (_m *URLHandler) SaveURL(ctx context.Context, url string) (string, error) {
	ret := _m.Called(ctx, url)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURLS provides a mock function with given fields: ctx, urls
func (_m *URLHandler) SaveURLS(ctx context.Context, urls []models.BatchRequest) ([]models.BatchResponse, error) {
	ret := _m.Called(ctx, urls)

	var r0 []models.BatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.BatchRequest) ([]models.BatchResponse, error)); ok {
		return rf(ctx, urls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.BatchRequest) []models.BatchResponse); ok {
		r0 = rf(ctx, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.BatchRequest) error); ok {
		r1 = rf(ctx, urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewURLHandler creates a new instance of URLHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLHandler {
	mock := &URLHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
